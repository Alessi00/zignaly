import faker from "faker";
import merge from "../../src/utils/merge";

export const makePosition = (override?: Partial<Position>): Position => {
  const seed: Position = {
    positionId: faker.random.alphaNumeric(24),
    base: "LINK",
    buyTTL: 5184000,
    closed: false,
    exchange: "Zignaly",
    exchangeType: "spot",
    internalExchangeId: "Zignaly1585127408_5e8754f075020",
    isCopyTrader: false,
    isCopyTrading: false,
    leverage: 1,
    paperTrading: false,
    profitSharing: false,
    providerName: "Manual",
    quote: "USDT",
    signalId: "a2bab8feb4427ab12ddb1f1bdb8dd9b7",
    status: 9,
    stopLossPriority: "percentage",
    takeProfitTargetsCountFail: 0,
    takeProfitTargetsCountPending: 0,
    takeProfitTargetsCountSuccess: 0,
    trailingStopTriggered: false,
    type: "open",
    updating: false,
    reBuyTargetsCountFail: 0,
    reBuyTargetsCountSuccess: 0,
    reBuyTargetsCountPending: 0,
    amount: 0.9,
    availableAmount: 0.9,
    buyPrice: 27.74,
    multiData: null,
    openDate: 1631045398000,
    pair: "LINKUSDT",
    positionSizePercentage: null,
    positionSizeQuote: 24.965999999999998,
    providerId: "1",
    realInvestment: 24.965999999999998,
    remainAmount: 0.8991,
    side: "LONG",
    stopLossFollowsTakeProfit: false,
    stopLossOrderId: null,
    stopLossPercentage: null,
    stopLossPrice: null,
    stopLossToBreakEven: false,
    trailingStopPercentage: null,
    trailingStopTriggerPercentage: null,
    trailingStopTriggerPrice: false,
    trailingStopTriggerPriority: "percentage",
    unitsInvestment: "USDT",
    unitsAmount: "LINK",
    short: "LINK/USDT",
    tradeViewSymbol: "LINKUSDT",
    priceDifference: -17.48,
    sellPrice: 22.89,
    unrealizedProfitLosses: -4.364999999999998,
    unrealizedProfitLossesPercentage: -17.48,
    logoUrl: "",
    reBuyTargets: null,
    takeProfitTargets: null,
    reduceOrders: null,
    invested: 24.966,
    providerOwnerUserId: "5e6b15a86c20cdaa4c0196e0",
  };
  return merge(seed, override) as Position;
};

export const makeClosedPosition = (override: Partial<Position>) => {
  return makePosition({
    ...override,
    profitSharing: false,
    isCopyTrading: true,
  });
};
